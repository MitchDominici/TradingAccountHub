@page "/order"
@using AlpacaAccountHub.AlpacaRequests
@using AlpacaAccountHub.Data
@using AlpacaAccountHub.Data.AlpacaAccount
@using AlpacaAccountHub.Data.ApiKeys
@using AlpacaAccountHub.Data.SymbolData
@using AlpacaAccountHub.PolygonRequests
@using AlpacaAccountHub.WebSockets
@using Microsoft.AspNetCore.DataProtection
@using Microsoft.EntityFrameworkCore.Metadata.Internal

@attribute [Authorize]
@inject SubmitOrder PlaceOrder
@inject SubmitOrder CancelOrder
@inject AlpacaAccountInfo AccountInfo
@inject Snapshot SingleTicker
@inject Positions AllPositions
@inject Positions SinglePosition

@inject IJSRuntime JsRuntime

<h1 style="align-content: center">Order Hub</h1>

@if (accountInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (accountInfo.numberOfDayTrades == 4 && positions.numPositions == 0)
    {
        <h2 style="color:red;align-content: center">Cannot make day trades today (@accountInfo.today)</h2>
    }
    else
    {


    }
    @if (submittedOrder.submitted == true)
    {
        if (submittedOrder.canceled == true)
        {
            <p style="align-content: center"><strong>Order Cancelled</strong></p>
        }
        else
        {
            <div class="submittedOrder" id="submittedOrder">
                <table>
                    <colgroup span="2"></colgroup>
                    <thead>
                        <tr id="submittedOrderRow">
                            <td style="height:15px">
                                <p><strong>@submittedOrder.symbol</strong></p>
                            </td>
                            <td style="height:15px">
                                <p>Submitted at: @submittedOrder.submitted_at</p>
                            </td>
                            <td style="height:15px">
                                <p>Limit Price: @submittedOrder.limit_price</p>
                            </td>
                            <td style="height:15px">
                                <p>@submittedOrder.side</p>
                            </td>
                            <td style="height:15px">
                                <p># of Shares: @submittedOrder.qty</p>
                            </td>
                            <td style="height:15px">
                                <input type="button" value="CANCEL Order" @onclick="Cancel">
                            </td>
                        </tr>
                    </thead>
                </table>
            </div>
        }
    }
    <div class="orderContainer">
        <div class="buySellContainer">

            <div class="symbolFlex">
                <label for="symbol">Symbol:</label>
                <input type="text" id="symbol" size="5" style="text-transform:uppercase" @bind-value="order.symbol" @bind-value:event="oninput">

                <input type="hidden" id="searchSymbolValue" form="searchTicker" style="text-transform:uppercase">
                <button type="submit" id="searchSymbolButton" form="searchTicker" value="Search" name="searchSymbol" onclick="DisplayChart()">Search</button>
            </div>

            <div class="sideFlex">
                <div class="radio-toolbar">
                    <input type="radio" id="Buy" name="BuySell" value="buy" @onchange="RadioSelection" />
                    <label for="Buy" id="sideLabels">BUY</label>
                    <div class="divider"><p>&#8592; Side &#8594;</p></div>
                    <input type="radio" id="Sell" name="BuySell" value="sell" @onchange="RadioSelection" />
                    <label for="Sell" id="sideLabels">SELL</label>
                </div>
            </div>

            <div class="limitPrice" id="textLabels">
                <label for="limitPrice">Limit Price:</label>
                <input id="limitPrice" type="text" size="5" @bind-value="order.limitPrice">
            </div>
            
            <div id="textLabels">
                <label for="stopPrice">Stop Price:</label>
                <input id="stopPrice" type="text" size="5" @bind-value="order.stopPrice" >
            </div>

            <div class="quantity">
                <label for="quantity" id="textLabels"># Shares:</label>
                <input type="text" list="quantity" size="6" @bind-value="order.quantity" />
                <datalist id="quantity" form="submitOrder">
                    <option value="50">50</option>
                    <option value="75">75</option>
                    <option value="100">100</option>
                    <option value="125">125</option>
                    <option value="150">150</option>
                    <option value="175">175</option>
                    <option value="200">200</option>
                    <option value="225">225</option>
                    <option value="250">250</option>
                </datalist>

            </div>

            <div class="type">
                <label for="type" id="textLabels">Order Type:</label>
                <select id="type" form="submitOrder" @bind="type">
                    <option value="limit">Limit</option>
                    <option value="stop">Stop</option>
                    <option value="market">Market</option>
                    <option value="stopLimit">Stop Limit</option>
                </select>
            </div>

            <div class="timeInForce" id="textLabels">
                <label for="timeInForce">Time in Force:</label>
                <select id="timeInForce" form="submitOrder" @bind="timeInForce">
                    <option value="gtc">GTC</option>
                    <option value="fok">Fill/Kill</option>
                    <option value="day">Day</option>
                </select>
            </div>
            
          
            
            <div>
                <input id="submitOrderButton" type="submit" name="submitOrder" form="submitOrder" value="Submit Order" class="submitOrder" @onclick="ManualOrder">
            </div>
        </div>
        <div class="openPosition" id="openPosition">
            @if (positions.numPositions == 0)
            {
                <p style="align-content: center" colspan="2"><strong>No Open Positions</strong></p>
            }
            else
            {
                <table class="table-fill">
                    <colgroup span="2"></colgroup>
                    <thead>
                        @if (Convert.ToDecimal(openPosition.unrealized_intraday_plpc) >= 0)
                        {
                            <tr>
                                <th style="align-content: center; background-color: green" colspan="2">@openPosition.symbol
                                    
                                </th>   
                                
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <th style="align-content: center; background-color: red" colspan="2">@openPosition.symbol 
                                   
                                </th>     
                               
                            </tr>
                        }

                    </thead>
                    <tbody class="table-hover">
                        <tr>
                            <td class="text-left">Avg. entry Price:</td>
                            <td class="text-left">$@openPosition.avg_entry_price</td>
                        </tr>
                        <tr>
                            <td class="text-left">Current Price:</td>
                            <td class="text-left">$@openPosition.current_price</td>
                        </tr>
                        <tr>
                            <td class="text-left">Unrealized Intraday $ Profit Loss:</td>
                            <td class="text-left">$@openPosition.unrealized_intraday_pl</td>
                        </tr>
                        <tr>
                            <td class="text-left">Unrealized Intraday % Profit/Loss:</td>
                            <td class="text-left">@openPosition.unrealized_intraday_plpc%</td>
                        </tr>
                    </tbody>
                </table>
            }
        </div>

    </div>
    <!-- TradingView Widget BEGIN -->
    <div id="displayChart">
        
    </div>
    <!-- TradingView Widget END -->




    <!--  Search for a symbol container
      
    <div class="searchedSymbolContainer" id="lastTrade">
        @if (@searchedSymbol.previousDayClose == 0)
        {
            <p style="align-content: center"><strong>Search for a stock to display information</strong></p>
        }
        else
        {
            <table class="table-fill">
                <colgroup span="2"></colgroup>
                <thead>
                    <tr>
                        <th style="align-content:center">@searchedSymbol.ticker </th>
                        @if (@searchedSymbol.tradable == "true")
                        {
                            <th style="align-content:center">Tradable</th>
                        }
                        else
                        {
                            <th style="align-content:center">NOT Tradable</th>
                        }

                    </tr>
                </thead>
                <tbody class="table-hover">
                    <tr>
                        <td class="text-left">Previous Day Close:</td>
                        <td class="text-left">@searchedSymbol.previousDayClose</td>
                    </tr>
                    <tr>
                        <td class="text-left">Last Minute Close:</td>
                        <td class="text-left">@searchedSymbol.minuteClose</td>
                    </tr>
                    <tr>
                        <td class="text-left">$ Change:</td>
                        <td class="text-left">@searchedSymbol.todaysChange</td>
                    </tr>
                    <tr>
                        <td class="text-left">% Change:</td>
                        <td class="text-left">@searchedSymbol.todaysChangePerc</td>
                    </tr>
                    <tr>
                        <td class="text-left">Previous Day Volume:</td>
                        <td class="text-left">@searchedSymbol.previousDayVolume</td>
                    </tr>
                </tbody>
            </table>
        }
    </div>
    -->
}


@code
{

    private PositionsData positions = new PositionsData();
    private PositionsData openPosition = new PositionsData();
    private AlpacaAccountData accountInfo;
    OrdersData order = new OrdersData();
    public static TickerDetails searchedSymbol = new TickerDetails();
    public static SubmittedOrder submittedOrder = new SubmittedOrder();
    public static SubmittedOrder canceledOrder = new SubmittedOrder();

    public string side { get; set; } = "";
    public string lookupSymbol { get; set; } = "";
    public string type { get; set; } = "limit";
    public string timeInForce { get; set; } = "gtc";

    protected override async Task OnInitializedAsync()
    {
        accountInfo = await AccountInfo.AccountInfo();

        System.Timers.Timer t = new System.Timers.Timer();
        t.Elapsed += async (s, e) =>
        {
            positions = await AllPositions.AllPositions();
            if (positions.numPositions != 0)
            {
                openPosition = await SinglePosition.SinglePosition(positions.symbol);
            }

            await InvokeAsync(StateHasChanged);
        };
        t.Interval = 3000;
        t.Start();


    }

    [JSInvokable]
    public async Task SearchSymbol()
    {
        lookupSymbol = order.symbol;
        Snapshot single = new Snapshot();
        // JSRuntime.InvokeVoidAsync("DisplayChart");
        searchedSymbol = await single.SingleTicker(order.symbol);

    }

    public void RadioSelection(ChangeEventArgs args)
    {
        side = args.Value.ToString();
    }

    public async Task ManualOrder()
    {
        SubmitOrder placeOrder = new SubmitOrder();
        submittedOrder = await placeOrder.PlaceOrder(order, type, timeInForce, side);
        Console.WriteLine(submittedOrder);


    }

    public async Task Cancel()
    {
        SubmitOrder cancel = new SubmitOrder();
        submittedOrder = await cancel.CancelOrder(submittedOrder.id);
        Console.WriteLine(canceledOrder);
    }


}